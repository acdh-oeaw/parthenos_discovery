)
GRAPH <provenance> {?gRecord <dnetcollectedFrom> ?api . ?api <dnetisApiOf> \"PARTHENOS\"^^<http://www.w3.org/2001/XMLSchema#string>}
}
group by ?topclass ?class
order by ?topclass ?class
"
res <- SPARQL(url = endpoint, q)$results
colourCount = length(unique(res$specific_class))
getPalette = colorRampPalette(brewer.pal(12, "Paired"))
ggplot(data = res, aes(x = topclass, y = count, fill = specific_class)) +
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))+
#theme(legend.position="bottom") +
theme(plot.margin=unit(c(0,0,0,0),"cm"))+
theme(legend.text=element_text(size=6))+
scale_fill_manual(values = colorRampPalette(brewer.pal(8, "Accent"))(colourCount),
guide = guide_legend(nrow=2))
res <- SPARQL(url = endpoint, q)$results
colourCount = length(unique(res$specific_class))
getPalette = colorRampPalette(brewer.pal(12, "Paired"))
ggplot(data = res, aes(x = topclass, y = count, fill = specific_class)) +
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))+
#theme(legend.position="bottom") +
theme(plot.margin=unit(c(0,0,0,0),"cm"))+
theme(legend.text=element_text(size=6))+
scale_fill_manual(values = getPalette(colourCount),
guide = guide_legend(nrow=2)) +
ggplot(data = res, aes(x = topclass, y = count, fill = specific_class)) +
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))+
#theme(legend.position="bottom") +
theme(plot.margin=unit(c(0,0,0,0),"cm"))+
theme(legend.text=element_text(size=6))+
scale_fill_manual(values = getPalette(colourCount),
guide = guide_legend(nrow=2)) +
ggplot(data = res, aes(x = topclass, y = count, fill = specific_class)) +
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))+
#theme(legend.position="bottom") +
theme(plot.margin=unit(c(0,0,0,0),"cm"))+
theme(legend.text=element_text(size=6))+
scale_fill_manual(values = getPalette(colourCount),
guide = guide_legend(nrow=2)) +
ggplot(data = res, aes(x = topclass, y = count, fill = specific_class)) +
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))+
#theme(legend.position="bottom") +
theme(plot.margin=unit(c(0,0,0,0),"cm"))+
theme(legend.text=element_text(size=6))+
scale_fill_manual(values = getPalette(colourCount),
guide = guide_legend(nrow=2)) +
ggplot(data = res, aes(x = topclass, y = count, fill = specific_class)) +
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))+
#theme(legend.position="bottom") +
theme(plot.margin=unit(c(0,0,0,0),"cm"))+
theme(legend.text=element_text(size=6))+
scale_fill_manual(values = getPalette(colourCount),
guide = guide_legend(nrow=2)) +
ggplot(data = res, aes(x = topclass, y = count, fill = specific_class)) +
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))+
#theme(legend.position="bottom") +
theme(plot.margin=unit(c(0,0,0,0),"cm"))+
theme(legend.text=element_text(size=6))+
scale_fill_manual(values = getPalette(colourCount),
guide = guide_legend(nrow=2)) +
res <- SPARQL(url = endpoint, q)$results
colourCount = length(unique(res$specific_class))
getPalette = colorRampPalette(brewer.pal(12, "Paired"))
ggplot(data = res, aes(x = topclass, y = count, fill = specific_class)) +
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))+
#theme(legend.position="bottom") +
theme(plot.margin=unit(c(0,0,0,0),"cm"))+
theme(legend.text=element_text(size=6))+
scale_fill_manual(values = getPalette(colourCount),
guide = guide_legend(nrow=2))
library(SPARQL)
library(ggplot2)
library(reshape)
library(scales)
colourCount = length(unique(res$specific_class))
getPalette = colorRampPalette(brewer.pal(12, "Paired"))
endpoint <- "https://virtuoso.parthenos.d4science.org/sparql"
q <- " select distinct ?topclass
(?class as ?specific_class) (count(distinct ?instanceURI) as ?count)
where{
graph ?gRecord {
?instanceURI a ?class.
}
optional { ?class rdfs:subClassOf*  ?topclass. }
filter(
?topclass = crmpe:PE35_Project ||
?topclass = crmpe:PE1_Service ||
?topclass = crm:E39_Actor ||
?topclass = crmpe:PE18_Dataset ||
?topclass = crmdig:D14_Software
)
GRAPH <provenance> {?gRecord <dnetcollectedFrom> ?api . ?api <dnetisApiOf> \"PARTHENOS\"^^<http://www.w3.org/2001/XMLSchema#string>}
}
group by ?topclass ?class
order by ?topclass ?class
"
res <- SPARQL(url = endpoint, q)$results
ggplot(data = res, aes(x = topclass, y = count, fill = specific_class)) +
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))+
#theme(legend.position="bottom") +
theme(plot.margin=unit(c(0,0,0,0),"cm"))+
theme(legend.text=element_text(size=6))+
scale_fill_manual(values = getPalette(colourCount),
guide = guide_legend(nrow=2))
ggplot(data = res, aes(x = topclass, y = count, fill = specific_class)) +
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))+
#theme(legend.position="bottom") +
theme(plot.margin=unit(c(0,0,0,0),"cm"))+
theme(legend.text=element_text(size=6))+
scale_fill_brewer(palette="Paired")
res <- SPARQL(url = endpoint, q)$results
colourCount = length(unique(res$specific_class))
getPalette = colorRampPalette(brewer.pal(12, "Paired"))
ggplot(data = res, aes(x = topclass, y = count, fill = specific_class)) +
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))+
#theme(legend.position="bottom") +
theme(plot.margin=unit(c(0,0,0,0),"cm"))+
theme(legend.text=element_text(size=6))+
scale_fill_manual(values = getPalette(colourCount))
res <- SPARQL(url = endpoint, q)$results
colourCount = length(unique(res$specific_class))
getPalette = colorRampPalette(brewer.pal(9, "Set1")
ggplot(data = res, aes(x = topclass, y = count, fill = specific_class)) +
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))+
#theme(legend.position="bottom") +
theme(plot.margin=unit(c(0,0,0,0),"cm"))+
theme(legend.text=element_text(size=6))+
scale_fill_brewer(palette="Paired")
colourCount = length(unique(res$specific_class))
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
ggplot(data = res, aes(x = topclass, y = count, fill = specific_class)) +
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))+
#theme(legend.position="bottom") +
theme(plot.margin=unit(c(0,0,0,0),"cm"))+
theme(legend.text=element_text(size=6))+
scale_fill_brewer(palette="Paired")
install.packages("colorRamps")
res <- SPARQL(url = endpoint, q)$results
colourCount = length(unique(res$specific_class))
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
ggplot(data = res, aes(x = topclass, y = count, fill = specific_class)) +
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))+
#theme(legend.position="bottom") +
theme(plot.margin=unit(c(0,0,0,0),"cm"))+
theme(legend.text=element_text(size=6))+
scale_fill_manual(values = colorRampPalette(brewer.pal(12,
"Accent"))(colourCount))
res <- SPARQL(url = endpoint, q)$results
display.brewer.all()
colourCount = length(unique(res$specific_class))
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
ggplot(data = res, aes(x = topclass, y = count, fill = specific_class)) +
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))+
#theme(legend.position="bottom") +
theme(plot.margin=unit(c(0,0,0,0),"cm"))+
theme(legend.text=element_text(size=6))+
scale_fill_manual(values = colorRampPalette(brewer.pal(12,
"Accent"))(colourCount))
library(SPARQL)
library(ggplot2)
library(reshape)
library(scales)
library(RColorBrewer)
library(colorRamps)
endpoint <- "https://virtuoso.parthenos.d4science.org/sparql"
q <- " select distinct
?type
(str(?type_label) as ?type_label)
?class
( GROUP_CONCAT(distinct ?class_label, \"/\") as ?class_label )
?instanceClass
( GROUP_CONCAT(distinct ?instanceClass_labelX , \"/\") as ?instanceClass_label )
(str(?ds) as ?ds)
where{
graph ?gRecord  {
?type a ?class.
optional{?type rdfs:label ?type_label.}
{?instanceURI crm:P2_has_type ?type} union {?type crm:P2i_is_type_of ?instanceURI}
}
values ?classE55 { <http://www.cidoc-crm.org/cidoc-crm/E55_Type> }
?class rdfs:subClassOf* ?classE55 .
optional{?class rdfs:label ?class_label}
optional{ ?instanceURI a ?instanceClass.
optional {?instanceClass rdfs:label ?instanceClass_labelX.}
}
GRAPH <provenance> {
values ?ds { \"PARTHENOS\"^^<http://www.w3.org/2001/XMLSchema#string> }
?gRecord <dnetcollectedFrom> ?api . ?api <dnetisApiOf> ?ds}
}
group by ?ds ?class ?instanceClass ?type  ?type_label
order by ?ds ?type
"
res <- SPARQL(url = endpoint, q)$results
ggplot(data = res, aes(x = type, y = class, fill = type)) +
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))+
theme(plot.margin=unit(c(0,0,0,0),"cm"))+
theme(legend.text=element_text(size=6))
ggplot(data = res, aes(x = type, y = class, fill = type)) +
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))+
#theme(plot.margin=unit(c(0,0,0,0),"cm"))+
theme(legend.text=element_text(size=6))
res <- SPARQL(url = endpoint, q)$results
ggplot(data = res, aes(x = type, y = instanceClass, fill = instanceClass)) +
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))+
#theme(plot.margin=unit(c(0,0,0,0),"cm"))+
theme(legend.text=element_text(size=6))
res <- SPARQL(url = endpoint, q)$results
ggplot(data = res, aes(x = type, y = instanceClass, fill = instanceClass)) +
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))+
theme(plot.margin=unit(c(0,0,0,0),"cm"))+
theme(legend.text=element_text(size=6))
library(SPARQL)
library(ggplot2)
library(reshape)
library(scales)
library(RColorBrewer)
library(colorRamps)
endpoint <- "https://virtuoso.parthenos.d4science.org/sparql"
q <- " select distinct
?type
(str(?type_label) as ?type_label)
?class
( GROUP_CONCAT(distinct ?class_label, \"/\") as ?class_label )
?instanceClass
( GROUP_CONCAT(distinct ?instanceClass_labelX , \"/\") as ?instanceClass_label )
(str(?ds) as ?ds)
where{
graph ?gRecord  {
?type a ?class.
optional{?type rdfs:label ?type_label.}
{?instanceURI crm:P2_has_type ?type} union {?type crm:P2i_is_type_of ?instanceURI}
}
values ?classE55 { <http://www.cidoc-crm.org/cidoc-crm/E55_Type> }
?class rdfs:subClassOf* ?classE55 .
optional{?class rdfs:label ?class_label}
optional{ ?instanceURI a ?instanceClass.
optional {?instanceClass rdfs:label ?instanceClass_labelX.}
}
GRAPH <provenance> {
values ?ds { \"PARTHENOS\"^^<http://www.w3.org/2001/XMLSchema#string> }
?gRecord <dnetcollectedFrom> ?api . ?api <dnetisApiOf> ?ds}
}
group by ?ds ?class ?instanceClass ?type  ?type_label
order by ?ds ?type
"
res <- SPARQL(url = endpoint, q)$results
ggplot(data = res, aes(x = type, y = instanceClass, fill = type_label)) +
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))+
theme(plot.margin=unit(c(0,0,0,0),"cm"))+
theme(legend.text=element_text(size=6))
library(SPARQL)
library(ggplot2)
library(plotly)
library(reshape)
library(scales)
res <-  read.csv("class_population.V1.3.csv")
plot_ly(res, labels = ~class, values = ~count, type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste('nr.', count, ' class population'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE) %>%
layout(title = 'Class population',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
res <-  read.csv("class_population.V1.3.csv")
pie(res)
library(SPARQL)
library(ggplot2)
library(plotly)
library(reshape)
library(scales)
res <-  read.csv("class_population.V1.3.csv")
plot_ly(res, labels = ~class, values = ~count, type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste('nr.', count, ' class population'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1))
#The 'pull' attribute can also be used to create space between the sectors
) %>%
layout(title = 'Class population',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
res <-  read.csv("class_population.V1.3.csv")
plot_ly(res, labels = ~class, values = ~count, type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste('nr.', count, ' class population'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1))
#The 'pull' attribute can also be used to create space between the sectors
) %>%
layout(title = 'Class population',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
legend = list(x = 100, y = 0.5))
res <-  read.csv("class_population.V1.3.csv")
plot_ly(res, labels = ~class, values = ~count, type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste('nr.', count, ' class population'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1))
#The 'pull' attribute can also be used to create space between the sectors
) %>%
layout(title = 'Class population',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
legend = list(x = 100, y = 0.5, text(size=6)))
library(SPARQL)
library(ggplot2)
library(plotly)
library(reshape)
library(scales)
res <-  read.csv("class_population.V1.3.csv")
plot_ly(res, labels = ~class, values = ~count, type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste('nr.', count, ' class population'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1))
#The 'pull' attribute can also be used to create space between the sectors
) %>%
layout(title = 'Class population',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
legend = list(x = 100, y = 0.5, text(size=6)))
res <-  read.csv("class_population.V1.3.csv")
plot_ly(res, labels = ~class, values = ~count, type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste('nr.', count, ' class population'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1))
#The 'pull' attribute can also be used to create space between the sectors
) %>%
layout(title = 'Class population',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
legend = list(x = 100, y = 0.5)
textfont = list(color = '#000000', size = 6))
res <-  read.csv("class_population.V1.3.csv")
plot_ly(res, labels = ~class, values = ~count, type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste('nr.', count, ' class population'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1))
#The 'pull' attribute can also be used to create space between the sectors
) %>%
layout(title = 'Class population',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
legend = list(x = 100, y = 0.5),
textfont = list(color = '#000000', size = 6))
res <-  read.csv("class_population.V1.3.csv")
plot_ly(res, labels = ~class, values = ~count, type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste('nr.', count, ' class population'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1))
#The 'pull' attribute can also be used to create space between the sectors
) %>%
layout(title = 'Class population',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
legend = list(x = 100, y = 0.5),
font = list(color = '#000000', size = 6))
res <-  read.csv("class_population.V1.3.csv")
plot_ly(res, labels = ~class, values = ~count, type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste('nr.', count, ' class population'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1))
#The 'pull' attribute can also be used to create space between the sectors
) %>%
layout(title = 'Class population',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
legend = list(x = 100, y = 0.5),
font = list(color = '#000000', size = 7))
library(SPARQL)
library(ggplot2)
library(reshape)
library(scales)
library(RColorBrewer)
library(colorRamps)
endpoint <- "https://virtuoso.parthenos.d4science.org/sparql"
q <- " select distinct
?type
(str(?type_label) as ?type_label)
?class
( GROUP_CONCAT(distinct ?class_label, \"/\") as ?class_label )
?instanceClass
( GROUP_CONCAT(distinct ?instanceClass_labelX , \"/\") as ?instanceClass_label )
(str(?ds) as ?ds)
where{
graph ?gRecord  {
?type a ?class.
optional{?type rdfs:label ?type_label.}
{?instanceURI crm:P2_has_type ?type} union {?type crm:P2i_is_type_of ?instanceURI}
}
values ?classE55 { <http://www.cidoc-crm.org/cidoc-crm/E55_Type> }
?class rdfs:subClassOf* ?classE55 .
optional{?class rdfs:label ?class_label}
optional{ ?instanceURI a ?instanceClass.
optional {?instanceClass rdfs:label ?instanceClass_labelX.}
}
GRAPH <provenance> {
values ?ds { \"PARTHENOS\"^^<http://www.w3.org/2001/XMLSchema#string> }
?gRecord <dnetcollectedFrom> ?api . ?api <dnetisApiOf> ?ds}
}
group by ?ds ?class ?instanceClass ?type  ?type_label
order by ?ds ?type
"
res <- SPARQL(url = endpoint, q)$results
ggplot(data = res, aes(x = instanceClass, y = type, fill = type)) +
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))+
theme(plot.margin=unit(c(0,0,0,0),"cm"))+
theme(legend.text=element_text(size=6))
res <- SPARQL(url = endpoint, q)$results
ggplot(data = res, aes(x = instanceClass, y = type, fill = type)) +
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))+
theme(legend.text=element_text(size=6))
library(SPARQL)
library(ggplot2)
library(reshape)
library(scales)
library(RColorBrewer)
library(colorRamps)
res <-  read.csv("df.csv")
ggplot(data = res, aes(x = label, y = inst, fill = type)) +
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))+
theme(legend.text=element_text(size=6))
res <-  read.csv("df.csv")
ggplot(data = res, aes(x = label, y = ins, fill = type)) +
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))+
theme(legend.text=element_text(size=6))
res <-  read.csv("df.csv")
ggplot(data = res, aes(x = label, y = ins, fill = class)) +
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))+
theme(legend.text=element_text(size=6))
library(SPARQL)
library(ggplot2)
library(plotly)
library(reshape)
library(scales)
res <-  read.csv("pie.csv")
plot_ly(res, labels = ~class, values = ~count, type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste('nr.', count, ' class population'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1))
#The 'pull' attribute can also be used to create space between the sectors
) %>%
layout(title = 'Class population',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
legend = list(x = 100, y = 0.5),
font = list(color = '#000000', size = 7))
