INFO:root:
################################
READING CONFIG FILE: queries by George_Version 2.py
################################

timestamp: 180626_144639
INFO:root:title: Queries by George
INFO:root:description: As originally defined here: https://goo.gl/EXg5ws , now collected here to be processed by querPy
INFO:root:output_destination: https://drive.google.com/drive/folders/1H91WLpMRBaSsnzgUyBYOVQ-6C7fROOZa
INFO:root:Did not find output_format, using CSV instead
INFO:root:output_format: csv
INFO:root:summary_sample_limit: 50
INFO:root:Did not find cooldown_between_queries in config file, assuming zero instead
INFO:root:cooldown_between_queries: 0
INFO:root:endpoint: https://virtuoso.parthenos.d4science.org/sparql
INFO:root:got query_title: 1. types_per_class_V1.0.txt
INFO:root:scrubbing.
INFO:root:query_text (scrubbed): 
#DEFINE input:inference 'parthenos_rules'
select distinct 
?type  (str(?type_label) as ?type_label)
?classE55
( GROUP_CONCAT(distinct ?class_label, "/") as ?class_label )
?instanceClass
( GROUP_CONCAT(distinct str(?instanceClass_labelX) , "/") as ?instanceClass_label )
(str(?ds) as ?ds) 
?gRecord
where{
values ?classE55 { <http://www.cidoc-crm.org/cidoc-crm/E55_Type> }
optional{
?classE55 rdfs:label ?class_label.
}
graph ?gRecord  {
?type a ?classE55.
optional{?type rdfs:label ?type_label.}
{?instanceURI crm:P2_has_type ?type} union {?type crm:P2i_is_type_of ?instanceURI}
optional{ ?instanceURI a ?instanceClass.}
}
?instanceClass rdfs:label ?instanceClass_labelX.
GRAPH <provenance> {
values ?ds { "PARTHENOS"^^<http://www.w3.org/2001/XMLSchema#string> }
?gRecord <dnetcollectedFrom> ?api . ?api <dnetisApiOf> ?ds}
} 
order by ?type ?ds

INFO:root:got query_title: 2. place_instances_V.1.0.txt
INFO:root:scrubbing.
INFO:root:query_text (scrubbed): 
#DEFINE input:inference 'parthenos_rules'
select 
?classE53
( GROUP_CONCAT(distinct ?class_label, "/") as ?class)
?instanceURI
( GROUP_CONCAT(distinct ?instance_labelX, "/") as ?instance_label)
(str(?ds) as ?ds) 
#?gRecord
where{
values ?classE53 { <http://www.cidoc-crm.org/cidoc-crm/E53_Place> }
optional{
?classE53 rdfs:label ?class_label.
}
graph ?gRecord  {
?instanceURI a ?classE53.
optional {?instanceURI rdfs:label ?instance_labelX.}
}
GRAPH <provenance> {
values ?ds { "PARTHENOS"^^<http://www.w3.org/2001/XMLSchema#string> }
?gRecord <dnetcollectedFrom> ?api . ?api <dnetisApiOf> ?ds}
} 
order by ?ds ?instanceURI

INFO:root:got query_title: 3. periods_and_events_V1.0.txt
INFO:root:scrubbing.
INFO:root:query_text (scrubbed): 
#DEFINE input:inference 'parthenos_rules'
select distinct
?class
( GROUP_CONCAT(distinct ?class_labelX, "/") as ?class_label)
?instanceURI
str(?instance_labelX) as ?instance_label
(str(?ds) as ?ds) 
?gRecord
where{
values ?class { <http://www.cidoc-crm.org/cidoc-crm/E4_Period> <http://www.cidoc-crm.org/cidoc-crm/E5_Event>}
?class rdfs:label ?classlabelX. bind (str(?classlabelX) as ?class_labelX).
graph ?gRecord  {
?instanceURI a ?class.
}
optional {?instanceURI rdfs:label ?labelX. bind (str(?labelX) as ?instance_labelX).}
GRAPH <provenance> {
values ?ds { "PARTHENOS"^^<http://www.w3.org/2001/XMLSchema#string> }
?gRecord <dnetcollectedFrom> ?api . ?api <dnetisApiOf> ?ds}
} 
#group by ?ds ?gRecord ?class
order by ?ds ?gRecord ?instanceURI

INFO:root:got query_title: 4. tmp_class_population.V1.0.txt
INFO:root:scrubbing.
INFO:root:query_text (scrubbed): 
#3 ######### Counts instances per class per record. To have the instances per class replace count(distinct ?instanceURI) with ?instanceURI in 'select' clause #########
######### Result is the same as in https://beta-parthenos.d4science.org/aggregator/mvc/ui/lightui.do?ui=parthenos#/doc/objidentifier/parthenos___%253A%253A8d777f385d3dfec8815d20f7496026dc #########
#DEFINE input:inference 'parthenos_rules'
select distinct ?class count(distinct ?instanceURI) {
graph ?gRecord  {
?instanceURI a ?class.
}
#optional {?subclass rdfs:subClassOf ?class . }
#filter (!bound(?subclass ))
GRAPH <provenance> {?gRecord <dnetcollectedFrom> ?api . ?api <dnetisApiOf> "PARTHENOS"^^<http://www.w3.org/2001/XMLSchema#string>}
} 
group by ?gRecord ?class 

INFO:root:got query_title: 5. tmp_class_population_PE_top.V1.0.txt
INFO:root:scrubbing.
INFO:root:query_text (scrubbed): 
#DEFINE input:inference 'parthenos_rules'
select distinct ?topclass (?class as ?excplicit_class) (count(distinct ?instanceURI) as ?count) {
graph ?gRecord {
?instanceURI a ?class.
}
optional { ?class rdfs:subClassOf*  ?topclass. }
filter(
?topclass = crmpe:PE35_Project ||
?topclass = crmpe:PE1_Service ||
?topclass = crm:E39_Actor ||
?topclass = crmpe:PE18_Dataset ||
?topclass = crmdig:D14_Software
)
GRAPH <provenance> {?gRecord <dnetcollectedFrom> ?api . ?api <dnetisApiOf> "PARTHENOS"^^<http://www.w3.org/2001/XMLSchema#string>}
} 
#group by ?gRecord  ?topclass ?class 
group by ?topclass ?class
order by ?topclass ?class

INFO:root:got query_title: 6. tmp___all_project_min_data_gen_query_counts_v2.0.txt
INFO:root:scrubbing.
INFO:root:query_text (scrubbed): 
DEFINE input:inference 'parthenos_rules'
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX parthenos: <http://parthenos.d4science.org/CRMext/CRMpe.rdfs/>
PREFIX crm: <http://www.cidoc-crm.org/cidoc-crm/>
PREFIX crmdig: <http://www.ics.forth.gr/isl/CRMext/CRMdig.rdfs/>
select distinct 
#?gRecord
( COALESCE(str(?instance_label), ?instanceURI) as ?instance )  
( COALESCE(str(?ID_label), ?ID) as ?id)
( COALESCE(str(?Name_label), ?Name) as ?name )
#( COALESCE(str(?Service_label), ?Service) as ?service )
( COALESCE(str(?Team_label), ?Team) as ?team )
( COUNT(?Member) as ?member )
( COUNT(?Member_address) as ?member_address )
( COUNT(?Member_address_type) as ?member_address_type )
( COUNT(?Time_span) as ?time_span )
( COUNT(?Time_actual) as ?time_actual )
where {
#source
GRAPH <provenance> {?gRecord <dnetcollectedFrom> ?api . ?api <dnetisApiOf> "PARTHENOS"^^<http://www.w3.org/2001/XMLSchema#string>.}
#Gets all Projects per source-record
GRAPH ?gRecord {#
#Gets the Project
?instanceURI a parthenos:PE35_Project .
#Gets the Label of Project
?instanceURI rdfs:label ?instance_label .
#Gets ID of Project
OPTIONAL { ?instanceURI crm:P1_is_identified_by ?ID . 
 ?ID a crm:E42_Identifier; rdfs:label ?ID_label. }
#Gets Value of Name of Project
OPTIONAL { ?instanceURI crm:P1_is_identified_by ?Name.
 ?Name a crm:E41_Appellation; rdfs:label ?Name_label. }
#Gets the Service currently offered by Project
#OPTIONAL { ?instanceURI parthenos:PP1_currently_offers ?Service .
# OPTIONAL { ?Service rdfs:label ?Service_label. }  }
#Gets the Team currently maintaining Project
OPTIONAL { ?instanceURI parthenos:PP44_has_maintaining_team ?Team .
 OPTIONAL { ?Team rdfs:label ?Team_label.}
 #Gets the Members of the Team
 OPTIONAL { ?Team crm:P107_has_current_or_former_member ?Member .
  OPTIONAL { ?Member rdfs:label ?Member_label. }
   #Gets the Address of Actor
   OPTIONAL { ?Member crm:P76_has_contact_point ?Member_address.
    OPTIONAL { ?Member_address rdfs:label ?Member_address_label. }
    #Gets the type of Address of Actor
    OPTIONAL { ?Member_address crm:P2_has_type ?Member_address_type.
     OPTIONAL { ?Member_address_type rdfs:label ?Member_address_type_label. } 
    }#Member_address_type --end
   }#Member_address --end
  }#Member --end
 }#Team --end
#Gets the Time since when project has been run
OPTIONAL { ?instanceURI crm:P4_has_time-span ?Time_span .
 OPTIONAL { ?Time_span rdfs:label ?Time_span_label. } 
 OPTIONAL { ?Time_span crm:P82a_begin_of_the_begin ?Time_actual .}
}
}#?gRecord --end
}
order by  ?instance ?id ?name ?team #?service

INFO:root:got query_title: 7. tmp___all_project_min_data_gen_query_counts_v3.0.txt
INFO:root:scrubbing.
INFO:root:query_text (scrubbed): 
DEFINE input:inference 'parthenos_rules'
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX parthenos: <http://parthenos.d4science.org/CRMext/CRMpe.rdfs/>
PREFIX crm: <http://www.cidoc-crm.org/cidoc-crm/>
PREFIX crmdig: <http://www.ics.forth.gr/isl/CRMext/CRMdig.rdfs/>
select distinct 
#?gRecord
( COALESCE(str(?instance_label), ?instanceURI) as ?instance )  
( COALESCE(str(?ID_label), ?ID) as ?id)
( COALESCE(str(?Name_label), ?Name) as ?name )
#( COALESCE(str(?Service_label), ?Service) as ?service )
( COALESCE(str(?Team_label), ?Team) as ?team )
( COUNT(?Member)>0 as ?member )
( COUNT(?Member_address)>0 as ?member_address )
( COUNT(?Member_address_type)>0 as ?member_address_type )
( COUNT(?Time_span)>0 as ?time_span )
( COUNT(?Time_actual)>0 as ?time_actual )
where {
#source
GRAPH <provenance> {?gRecord <dnetcollectedFrom> ?api . ?api <dnetisApiOf> "PARTHENOS"^^<http://www.w3.org/2001/XMLSchema#string>.}
#Gets all Projects per source-record
GRAPH ?gRecord {#
#Gets the Project
?instanceURI a parthenos:PE35_Project .
#Gets the Label of Project
?instanceURI rdfs:label ?instance_label .
#Gets ID of Project
OPTIONAL { ?instanceURI crm:P1_is_identified_by ?ID . 
 ?ID a crm:E42_Identifier; rdfs:label ?ID_label. }
#Gets Value of Name of Project
OPTIONAL { ?instanceURI crm:P1_is_identified_by ?Name.
 ?Name a crm:E41_Appellation; rdfs:label ?Name_label. }
#Gets the Service currently offered by Project
#OPTIONAL { ?instanceURI parthenos:PP1_currently_offers ?Service .
# OPTIONAL { ?Service rdfs:label ?Service_label. }  }
#Gets the Team currently maintaining Project
OPTIONAL { ?instanceURI parthenos:PP44_has_maintaining_team ?Team .
 OPTIONAL { ?Team rdfs:label ?Team_label.}
 #Gets the Members of the Team
 OPTIONAL { ?Team crm:P107_has_current_or_former_member ?Member .
  OPTIONAL { ?Member rdfs:label ?Member_label. }
   #Gets the Address of Actor
   OPTIONAL { ?Member crm:P76_has_contact_point ?Member_address.
    OPTIONAL { ?Member_address rdfs:label ?Member_address_label. }
    #Gets the type of Address of Actor
    OPTIONAL { ?Member_address crm:P2_has_type ?Member_address_type.
     OPTIONAL { ?Member_address_type rdfs:label ?Member_address_type_label. } 
    }#Member_address_type --end
   }#Member_address --end
  }#Member --end
 }#Team --end
#Gets the Time since when project has been run
OPTIONAL { ?instanceURI crm:P4_has_time-span ?Time_span .
 OPTIONAL { ?Time_span rdfs:label ?Time_span_label. } 
 OPTIONAL { ?Time_span crm:P82a_begin_of_the_begin ?Time_actual .}
}
}#?gRecord --end
}
order by  ?instance ?id ?name ?team #?service

INFO:root:got query_title: 8. tmp___all_project_min_data_gen_query_v4.0.txt
INFO:root:scrubbing.
INFO:root:query_text (scrubbed): 
			DEFINE input:inference 'parthenos_rules'
			PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
			PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
			PREFIX parthenos: <http://parthenos.d4science.org/CRMext/CRMpe.rdfs/>
			PREFIX crm: <http://www.cidoc-crm.org/cidoc-crm/>
			PREFIX crmdig: <http://www.ics.forth.gr/isl/CRMext/CRMdig.rdfs/>
			select distinct 
			#?gRecord
			( COALESCE(str(?instance_label), ?instanceURI) as ?instance )
			( COALESCE(str(?id_label), ?id) as ?ID)
			( COALESCE(str(?name_label), ?name) as ?Name )
			(GROUP_CONCAT (DISTINCT COALESCE(str(?service), ?service), "
") as ?Services )
			(GROUP_CONCAT (DISTINCT COALESCE(str(?service_label), ?service), "
") as ?Services_Label )
			(GROUP_CONCAT (DISTINCT COALESCE(str(?team_label), ?team), "
") as ?Team )
			(GROUP_CONCAT (DISTINCT CONCAT ( 
			STRAFTER( str(?actorRelation), str(crm:)), ": ",
			COALESCE(str(?member_label), ?member), 
			?delim1,
			COALESCE(str(?member_address_type_label), ?member_address_type), 
			?delim2, COALESCE(str(?member_address_label), ?member_address)
			),"
") as ?Team_Members)
			(GROUP_CONCAT (DISTINCT CONCAT( 
			COALESCE(str(?time_span_label), ?time_span), ?delim3, str(?time_actual) 
			),"
") as ?Time_Span_of_Project )
			where {
			#source
			GRAPH <provenance> {?gRecord <dnetcollectedFrom> ?api . ?api <dnetisApiOf> "PARTHENOS"^^<http://www.w3.org/2001/XMLSchema#string>.}
			#Gets all Projects per source-record
			GRAPH ?gRecord {#
			#Gets the Project
			?instanceURI a parthenos:PE35_Project .
			#Gets the Label of Project
			?instanceURI rdfs:label ?instance_label .
			#Gets id of Project
			OPTIONAL { ?instanceURI crm:P1_is_identified_by ?id . 
			 ?id a crm:E42_Identifier; rdfs:label ?id_label. }
			#Gets Value of Name of Project
			OPTIONAL { ?instanceURI crm:P1_is_identified_by ?name.
			 ?name a crm:E41_Appellation; rdfs:label ?name_label. }
			#Gets the Service currently offered by Project
			OPTIONAL { ?instanceURI parthenos:PP1_currently_offers ?service .
			 OPTIONAL { ?service rdfs:label ?service_label. }  }
			#Gets the Team currently maintaining Project
			OPTIONAL { ?instanceURI parthenos:PP44_has_maintaining_team ?team .
			 OPTIONAL { ?team rdfs:label ?team_label.}
			 #Gets the Members of the Team
			 OPTIONAL { ?team ?actorRelation ?member . #crm:P107_has_current_or_former_member
			 ?member a crm:E39_Actor.
			  OPTIONAL { ?member rdfs:label ?member_label. }
			   #Gets the Address of Actor
			   OPTIONAL { ?member crm:P76_has_contact_point ?member_address.
				OPTIONAL { ?member_address rdfs:label ?member_address_label. }
				#Gets the type of Address of Actor
				OPTIONAL { ?member_address crm:P2_has_type ?member_address_type.
				 OPTIONAL { ?member_address_type rdfs:label ?member_address_type_label. } 
				}#Member_address_type --end
			   }#Member_address --end
			  }#Member --end
			 }#Team --end
			#Gets the Time since when project has been run
			OPTIONAL { ?instanceURI crm:P4_has_time-span ?time_span .
			 OPTIONAL { ?time_span rdfs:label ?time_span_label. } 
			 OPTIONAL { ?time_span crm:P82a_begin_of_the_begin ?time_actual .}
			}
			}#?gRecord --end
			Bind(if(Bound(?member),", ","") as ?delim1)
			Bind(if(Bound(?member_address_type),": ","") as ?delim2)
			Bind(if(Bound(?time_actual),": ","") as ?delim3)
			}
			group by  ?instanceURI ?instance_label ?id ?id_label ?name ?name_label
			#order by  ?instance ?ID ?Name

INFO:root:deduced output_destination_type: google_folder
ERROR:root:ERROR: No client_secret.json or credentials.json provided nor found in local folder!.
